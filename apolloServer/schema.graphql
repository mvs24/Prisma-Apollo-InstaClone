scalar Date

type User {
  id: ID!
  name: String!
  lastname: String!
  email: String!
  password: String!
  photo: String
  passwordResetToken: String
  passwordChangedAt: Date
  passwordResetExpires: Date
}

type Post {
  id: ID!
  user: User!
  likes: [PostLike!]!
  comments: [Comment!]!
  content: String
}

type PostLike {
  id: ID!
  user: User!
  post: Post!
}

type Comment {
  id: ID!
  user: User
  post: Post!
  content: String
  replies: [Reply!]!
}

type CommentLike {
  id: ID!
  user: User!
  comment: Comment!
}

type Reply {
  id: ID!
  user: User!
  content: String!
  comment: Comment!
}

type Query {
  me: User
}

type Mutation {
  signup(data: UserInput!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  forgotPassword(email: String!): Success!
  resetPassword(password: String!, resetToken: String!): AuthPayload!
  createPost(content: String!): Post!
}

type Success {
  message: String!
}

type AuthPayload {
  user: User
  token: String!
}

input UserInput {
  name: String!
  lastname: String!
  email: String!
  password: String!
  photo: String
}
