scalar Date

type User {
  id: ID!
  name: String!
  lastname: String!
  email: String
  password: String
  photo: String
  passwordResetToken: String
  passwordChangedAt: Date
  passwordResetExpires: Date
  role: ROLE!
  postLikes: [PostLike!]
  comments: [Comment!]
  posts: [Post!]
  replies: [Reply!]
  commentLikes: [CommentLike!]
  following: [String!]!
}

enum ROLE {
  ADMIN
  USER
}

type Post {
  id: ID!
  user: User!
  likes: [PostLike!]!
  comments: [Comment!]!
  content: String
}

type PostLike {
  id: ID!
  user: User!
  post: Post!
}

type Comment {
  id: ID!
  user: User
  post: Post!
  content: String
  replies: [Reply!]!
}

type CommentLike {
  id: ID!
  user: User!
  comment: Comment!
}

type Reply {
  id: ID!
  user: User!
  content: String!
  comment: Comment!
}

type Query {
  me: User
  getUsers(query: String): [User!]!
  getFollowings: [User!]
  getFollowers: [User!]
}

type Mutation {
  signup(data: UserInput!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  forgotPassword(email: String!): Success!
  resetPassword(password: String!, resetToken: String!): AuthPayload!
  createPost(content: String!): Post!
  createComment(content: String!, postId: String!): Comment!
  likePost(postId: String!): PostLike!
  deletePost(postId: String!): Post
  createReply(content: String!, commentId: String!): Reply!
  addFollowing(userId: String!): User!
}

type Success {
  message: String!
}

type AuthPayload {
  user: User
  token: String!
}

input UserInput {
  name: String!
  lastname: String!
  email: String!
  password: String!
  photo: String
}
